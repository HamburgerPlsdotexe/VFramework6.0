@page "/"

@using System.IO
@using Newtonsoft.Json
@using System.Text.Json
@using VFBlazor6._0.Terraform
@using VFBlazor6._0.Utility
@using Radzen.Blazor

@inject IJSRuntime JsRuntime
@inject NavigationManager navHelper
@inject TooltipService tooltipService
@inject NotificationService NotificationService

<div class="container my-4">
    <div class="col-lg-6 offset-lg-3">
        <RadzenCard>
            <RadzenButton Click=@NavToCustom Text="Create Custom Environment" ButtonStyle="ButtonStyle.Light" />
        </RadzenCard>
    </div>
</div>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="Environment" Data=@env Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Default Environment Information">
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Customer" />
                            <small style="display: block">(3-3 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Customer" @bind-Value=@env.userCustomer Class="w-100" />
                            <RadzenRequiredValidator Component="Customer" Text="Customer is required" Style="position: absolute" />
                            <RadzenRegexValidator Component="Customer" Text="Customer abbreviation must be 3 letters" Pattern="[a-z]{3}|[A-Z]{3}" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Solution" />
                            <small style="display: block">(3-3 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Solution" @bind-Value=@env.userSolution Class="w-100" />
                            <RadzenRequiredValidator Component="Solution" Text="Solution is required" Style="position: absolute" />
                            <RadzenRegexValidator Component="Solution" Text="Solution abbreviation must be 3 letters" Pattern="[a-z]{3}|[A-Z]{3}" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Region"></RadzenLabel>
                            <small style="display: block">1 Region</small>

                        </div>
                        <div class="col">
                            <RadzenDropDown TValue="string" style="display: block" Name="Region" AllowClear="true" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@env.userRegion
                                            Data=regionsDict.Keys Class="w-50" />
                            <RadzenRequiredValidator Component="Region" Text="Region is required" Style="position: absolute" />
                        </div>
                    </div>
                    <RadzenButton IsBusy=@disabled ButtonType="ButtonType.Submit" Text="Generate" />
                    <RadzenButton IsBusy=@disabled ButtonType="ButtonType.Button" Click=@DownloadBat ButtonStyle="ButtonStyle.Secondary" Text="Get .bat" 
                    MouseEnter="@(args => ShowTooltip3(args, new TooltipOptions(){ Duration = 20000, Position = TooltipPosition.Right }))" />
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>
<div class="container my-4">
    <div class="col-lg-6 offset-lg-3">
        <RadzenCard>
            <h2>Follow-up</h2>
            <ol>
                <li>Unpack the zip somewhere on your machine</li>
                <li>Edit the subnet prefix and IPs to your choice</li>
                <li>Run the added .bat file</li>
                <li>Check if the plan is to your liking</li>
                <li>Push the plan using "Terraform apply" in the same folder</li>
            </ol>
        </RadzenCard>
    </div>
</div>

@code {

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Please enter the three letter abbrevation of the customer, no spaces", options);
    void ShowTooltip2(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Please enter the three letter abbrevation of the solution, no spaces", options);
    void ShowTooltip3(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "The .bat contains an automated plan script which initialises and plans for you", options);

    bool busy = false;
    bool disabled = false;

    double progress = 0;

    Environment env = new();

    static Dictionary<string, string> regionsDict;

    void Disable()
    {
        disabled = true;
    }

    void Enable()
    {
        disabled = false;
    }

    async Task NavToCustom()
    {
        navHelper.NavigateTo("customtf");
    }

    async Task OnSubmit(Environment env)
    {
        Disable();
        await Task.Yield();
        Terraform.DefaultTFTemplate.Synthesise(new NameGenerator(env.userCustomer, env.userSolution, new string[] { env.userRegion, regionsDict[env.userRegion] }));
        FileOps.MoveFile(FileOps._jsonOldLoc, FileOps._jsonNewLoc);
        await Alert("The Terraform JSON plan has been generated, downloading...");
        await DownloadFileFromStream("cdk.tf.json", FileOps._jsonNewLoc);
        FileOps.CleanFiles();
        Enable();
        await Task.Yield();
    }

    async Task DownloadBat()
    {
        Disable();
        await Task.Yield();
        await DownloadFileFromStream("AutomatedEnvironmentPlanner.bat", FileOps._batLoc);
        Enable();

    }

    private async Task Alert(string msg)
    {
        await JsRuntime.InvokeVoidAsync("alert", msg);
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    protected override async Task OnInitializedAsync()
    {
        regionsDict = FileOps.JsonFileToDict(FileOps._solutionDir + @"/AzureData/AzureRegions.json");
    }

    async void OnInvalidSubmit()
    {
        await Alert("Please check if everything is correct");
    }

    private async Task DownloadFileFromStream(string file, string Fileloc)
    {
        var fileStream = FileOps.GetFileStream(Fileloc);
        var fileName = file;

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    class Environment
    {
        internal string? userCustomer { get; set; }
        internal string? userSolution { get; set; }
        internal string? userRegion { get; set; }
    }
}