@page "/"

@using Newtonsoft.Json
@using VFBlazor6._0.Terraform
@using VFBlazor6._0.Utility
@using Radzen.Blazor

@inject IJSRuntime jsRuntime
@inject NavigationManager navHelper
@inject TooltipService tooltipService

<h1>Virtualisation Framework</h1>


<p>
    Would you like to make a new concept environment or deploy a default one?
</p>

<div class="col-2 p-3">
    <RadzenCard>
        <table>
            <tr>
                <td><RadzenButton Click=@visibleCard Text="Default" /></td>
                <td><RadzenButton Click=@NavToCustom Text="Custom" ButtonStyle="ButtonStyle.Light" /></td>
            </tr>
        </table>
    </RadzenCard>
</div>

<div class="col-6 p-3">
    <RadzenCard Visible=vis class="col-md-6 col-lg-4 p-3">
        <h4 class="mb-4">Solution details</h4>
        <table>
            <tr>
                <td><RadzenTextBox Placeholder="Customer" Class="w-50" @bind-Value=userCustomer MaxLength="3" MouseEnter="@(args =>  ShowTooltip(args,
                                                                            new TooltipOptions(){ Position = TooltipPosition.Right }))"/></td>
            </tr>
            <tr>
                <td><RadzenTextBox Placeholder="Solution" Class="w-50" @bind-Value=userSolution MaxLength="3" MouseEnter="@(args =>  ShowTooltip(args,
                                                                            new TooltipOptions(){ Position = TooltipPosition.Right }))"/></td>
            </tr>
            <tr>
                <RadzenDropDown TValue="string" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@userRegion Placeholder="Select region"
                                Data=regionsDict.Keys Class="w-50" Change="@visibleCard2"/>
            </tr>
        </table>
    </RadzenCard>
</div>

<div class="col-2 p-3">
    <RadzenCard Visible=vis2>
        <table>
            <tr>
                <td><RadzenButton Click=@SynthDefault Text="Create" IsBusy=@busy Class="w-50"/></td>
            </tr>
        </table>
    </RadzenCard>
</div>


@code {

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Please enter the three letter abbrevation of the customer", options);
    void ShowTooltip2(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Please enter the three letter abbrevation of the solution", options);

    bool vis = false;
    bool vis2 = false;

    bool busy = false;
    static Dictionary<string, string> regionsDict;

    protected override async Task OnInitializedAsync()
    {
        regionsDict = FileOps.JsonFileToDict(FileOps._solutionDir + @"/AzureData/AzureRegions.json");
    }

    string? userCustomer;
    string? userSolution;
    string? userRegion;

    async Task<bool> jsonExists()
    {
        return false ? regionsDict.ContainsKey("error") : true;
    }
    async Task NavToCustom()
    {
        navHelper.NavigateTo("customtf");
    }
    async Task CleanAzureTF()
    {
        
    }
    async Task SynthDefault()
    {
        busy = true;
        await Task.Yield();
        //Debug.PrintDictContents(new NameGenerator(userCustomer, userSolution, regionsDict[userRegion]).GetResNames());
        Terraform.DefaultTFTemplate.Init(new NameGenerator(userCustomer, userSolution, regionsDict[userRegion]));
        await jsRuntime.InvokeVoidAsync("alert", "The Terraform files have been generated");
        busy = false;
        //FileOps.CleanUpOutFolder();
        await Task.Yield();
    }
    async Task visibleCard()
    {
        vis = true;
    }
    async Task visibleCard2()
    {
        vis2 = true;
    }

}

